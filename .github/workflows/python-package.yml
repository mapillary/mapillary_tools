# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        platform: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
    - name: Install ffmpeg for testing (Ubuntu only)
      run: |
        sudo apt update -y && sudo apt install -y ffmpeg
        ffmpeg -version
      if: matrix.platform == 'ubuntu-latest'
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Lint with black
      run: |
        black --check mapillary_tools tests
    - name: Type check with mypy
      run: |
        mypy mapillary_tools
    - name: Test with pytest
      run: |
        pytest tests
    - name: Build with Pyinstaller on MacOS
      run: |
        ./script/build
        ./dist/osx/mapillary_tools --version
        # Could run full integration tests with below but the binary is too slow to start up
        # MAPILLARY_TOOLS_EXECUTABLE=./dist/osx/mapillary_tools pytest tests/integration
      if: matrix.platform == 'macos-latest'
    - name: Build with Pyinstaller on Ubuntu
      run: |
        ./script/build_linux
        ./dist/linux/mapillary_tools --version
      if: matrix.platform == 'ubuntu-latest'
    - name: Build with Pyinstaller on Windows
      run: |
        ./script/build_win.bat
        ./dist/win/mapillary_tools.exe --version
      if: matrix.platform == 'windows-latest'
