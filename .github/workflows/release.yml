# This workflow will build the package with Pyinstaller, upload it to GitHub Releases, and publish it to PyPI

name: Release

on:
  workflow_run:
    workflows: ["Python package"]
    types:
      - completed

jobs:
  build_and_release:
    if: ${{ github.event.workflow_run.conclusion == 'success' && startsWith(github.ref, 'refs/tags/') }}

    strategy:
      matrix:
        python-version: ["3.11"]
        platform: ["ubuntu-latest", "macos-latest", "windows-latest"]
        architecture: ["x64"]
        include:
          - architecture: "x86"
            platform: "windows-latest"
            python-version: "3.11"

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v3
      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2
      - name: Set up ${{ matrix.architecture }} Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          # optional x64 or x86. Defaults to x64 if not specified
          architecture: ${{ matrix.architecture }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .
          python -m pip install -r requirements-dev.txt
      - name: Validate version
        run: |
          EXPECTED_REF=$(mapillary_tools --version | awk '{print "refs/tags/v" $3}')
          if [[ "$EXPECTED_REF" != "$GITHUB_REF" ]]; then
            echo "Version mismatch: $EXPECTED_REF != $GITHUB_REF"
            exit 1
          fi
        if: matrix.platform != 'windows-latest'
      - name: Build and test with Pyinstaller on MacOS
        # Enable for Python3.11 only because it often fails at codesign (subprocess timeout)
        if: matrix.platform == 'macos-latest'
        run: |
          # see https://github.com/mapillary/mapillary_tools/issues/566
          # TODO: move it to extras in setup.py
          python3 -m pip install pysocks
          ./script/build_osx
          # Could run full integration tests with the binary (it might be slow)
          pytest tests/integration
        env:
          MAPILLARY_TOOLS_EXECUTABLE: ./dist/osx/mapillary_tools
      - name: Build and test with Pyinstaller on Ubuntu
        if: matrix.platform == 'ubuntu-latest'
        run: |
          # see https://github.com/mapillary/mapillary_tools/issues/566
          # TODO: move it to extras in setup.py
          python3 -m pip install pysocks
          ./script/build_linux
          # Could run full integration tests with the binary (it might be slow)
          pytest tests/integration
        env:
          MAPILLARY_TOOLS_EXECUTABLE: ./dist/linux/mapillary_tools
      - name: Build and test with Pyinstaller on Windows
        if: matrix.platform == 'windows-latest'
        run: |
          # see https://github.com/mapillary/mapillary_tools/issues/566
          # TODO: move it to extras in setup.py
          python3 -m pip install pysocks
          ./script/build_bootloader.ps1
          ./script/build_win.ps1
          # Could run full integration tests with the binary (it might be slow)
          cp ./dist/win/mapillary_tools.exe mapillary_tools_WINDOWS_VERY_HARD_TO_FIND_YOU_IN_ANOTHER_DIR_SO_I_MOVE_YOU_HERE.exe
          pytest tests/integration
        env:
          MAPILLARY_TOOLS_EXECUTABLE: mapillary_tools_WINDOWS_VERY_HARD_TO_FIND_YOU_IN_ANOTHER_DIR_SO_I_MOVE_YOU_HERE.exe
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          generate_release_notes: true
          fail_on_unmatched_files: false
          files: |
            ./dist/releases/*

  pypi-publish:
    if: ${{ github.event.workflow_run.conclusion == 'success' && startsWith(github.ref, 'refs/tags/') }}
    name: Upload release to PyPI
    needs: ["build_and_release"]
    runs-on: "ubuntu-latest"
    steps:
      - name: Publish package distributions to TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.8.6
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@v1.8.6
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
