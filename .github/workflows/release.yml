# This workflow will build the package with Pyinstaller, upload it to GitHub Releases, and publish it to PyPI

name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build_and_release:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
        include:
          # macOS
          - platform: mac-arm64
            runs-on: macos-latest
            os: macos
            arch: arm64 # Apple Silicon
          - platform: mac-intel
            runs-on: macos-13
            os: macos
            arch: x64
            supports_ffmpeg: true # Intel Mac

          # Windows
          - platform: win-x64
            runs-on: windows-latest
            os: windows
            arch: x64
            supports_ffmpeg: true
          - platform: win-x86
            runs-on: windows-latest
            os: windows
            arch: x86
          - platform: win-arm64
            runs-on: windows-latest
            os: windows
            arch: arm64

          # Linux
          - platform: linux-x64
            runs-on: ubuntu-latest
            os: linux
            arch: x64
            supports_ffmpeg: true
          - platform: linux-arm64
            runs-on: ubuntu-latest
            os: linux
            arch: arm64

    runs-on: ${{ matrix.runs-on }}

    defaults:
      run:
        working-directory: ./main

    steps:
      # https://github.com/actions/checkout#Checkout-multiple-repos-side-by-side
      # pull into mapillary/mapillary_tools/main
      - uses: actions/checkout@v4
        with:
          path: main

      # https://github.com/actions/checkout#Checkout-multiple-repos-side-by-side
      # pull into mapillary/mapillary_tools/exiftool
      - name: Setup ExifTool
        uses: actions/checkout@v4
        with:
          repository: "exiftool/exiftool"
          path: exiftool

      - name: Check ExifTool version
        # DO NOT USE envvars here which does not work on Windows (needs prefixing with $env:)
        # need to rename exiftool to exiftool.pl according to https://exiftool.org/install.html
        run: |
          mv ${{ github.workspace }}/exiftool/exiftool ${{ github.workspace }}/exiftool/exiftool.pl
          perl ${{ github.workspace }}/exiftool/exiftool.pl -ver

      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v3
        if: ${{ matrix.supports_ffmpeg }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .
          python -m pip install -r requirements-dev.txt

      - name: Validate version
        run: |
          EXPECTED_GITHUB_REF=$(mapillary_tools --version | awk '{print "refs/tags/v" $3}')
          if [[ "$EXPECTED_GITHUB_REF" != "$GITHUB_REF" ]]; then
            echo "Version mismatch: $EXPECTED_GITHUB_REF != $GITHUB_REF"
            exit 1
          fi
        if: matrix.platform != 'windows-latest'

      - name: Build and test
        run: |
          ./script/build_${{ matrix.os }}
          pytest tests/integration
        env:
          ARCH: ${{ matrix.arch }}
          MAPILLARY_TOOLS__TESTS_EXECUTABLE: ./dist/${{ matrix.os }}/mapillary_tools${{ matrix.os == 'windows' && '.exe' || '' }}
          MAPILLARY_TOOLS__TESTS_EXIFTOOL_EXECUTABLE: perl ${{ github.workspace }}/exiftool/exiftool.pl

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: |
            ./main/dist/releases/*

  pypi-publish:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    name: Upload release to PyPI
    needs: ["build_and_release"]
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      # https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
      - name: Install pypa/build
        run: python3 -m pip install build

      - name: Build
        # the default ouput dir dist/ was used by pyinstaller
        run: python3 -m build --outdir pypa_dist/ .

      - name: Publish package distributions to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          packages-dir: pypa_dist/
          skip-existing: true

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: pypa_dist/
